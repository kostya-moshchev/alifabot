from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from datetime import datetime
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext


import app.keybords as kd
import app.database.requests as rq
from app.database.requests import get_location, save_photo
from app.keybords import location_info


router = Router()


class Photo(StatesGroup):
    photo = State()
    replace_photo = State()

class Reg(StatesGroup):
    name = State()


@router.callback_query(F.data.in_({'reg', 'first_name'}))
async def main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Reg.name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:')


@router.message(Reg.name)
async def main(message: Message, state: FSMContext):
    username = message.from_user.username if message.from_user.username else None
    await rq.set_user(
        tg_id=message.from_user.id, name=message.text, username=username)
    await message.answer(
        f'–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è: {message.text}',
        reply_markup=kd.main_one
    )
    await state.clear()

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_in_bd = await rq.user_in_bd(message.from_user.id)
    if not user_in_bd:
        await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–º—è—Ç–Ω—ã–º–∏ –º–µ—Å—Ç—è–º–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ê–ª—å—Ñ–∞—Å–∏–≥–º–∞, –∞ –µ—Å–ª–∏ —Ç—ã —É–º–ø–µ–µ—à—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ—Ä–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º —Ä—è–¥–æ–º —Å–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º–∏, —Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–µ—à—å –Ω–∞—à –∫–æ–Ω–∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∏—à—å –ø—Ä–∏–∑ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏!!!',
                          reply_markup=kd.reg)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–∞–º—è—Ç–Ω—ã–º–∏ –º–µ—Å—Ç—è–º–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ê–ª—å—Ñ–∞—Å–∏–≥–º–∞, –∞ –µ—Å–ª–∏ —Ç—ã —É–º–ø–µ–µ—à—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ—Ä–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤—ã–º —Ä—è–¥–æ–º —Å–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º–∏, —Ç–æ —Ç—ã –≤—ã–∏–≥—Ä–∞–µ—à—å –Ω–∞—à –∫–æ–Ω–∫—É—Ä—Å –∏ –ø–æ–ª—É—á–∏—à—å –ø—Ä–∏–∑ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏!!!',
                          reply_markup=kd.main)
    if message.from_user.id == int('973404201'):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω', reply_markup=kd.main_admin)

@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer('–≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /help')

@router.message(F.data =='')
async def main(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', reply_markup=await kd.inline_location())

@router.callback_query(F.data =='main')
async def main(callback: CallbackQuery,  state: FSMContext):
    await state.clear()
    await callback.answer()
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é:', reply_markup=await kd.inline_location())


@router.callback_query(F.data.startswith('location_'))
async def main(callback: CallbackQuery):
    await callback.answer()
    lctn = await get_location(callback.data.split('_')[1])
    if lctn:
        await callback.message.answer_photo(caption=lctn.description, photo=lctn.photo, reply_markup=location_info(lctn))
    else:
        await callback.message.edit_text("Location not found")


@router.callback_query(F.data.startswith('task_'))
async def main(callback: CallbackQuery):
    await callback.answer()
    task = await rq.get_task(callback.data.split('_')[1])
    task_photo = await rq.get_task_photo(callback.data.split('_')[1])
    if task_photo:
        await callback.message.answer_photo(photo=task_photo, caption=task)
    else:
        await callback.message.answer(task)


@router.callback_query(F.data.startswith('my_photo_'))
async def main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    id_location = int(callback.data.split('_')[2])

    result = await rq.get_photos_from_db_with_location(id_location, callback.from_user.id)
    await state.update_data(id_location=id_location)
    if result != None:
        photo_id, photo_exists = result
        await state.update_data(photo_id=photo_id, photo_exists=photo_exists)
        await callback.message.answer_photo(photo=photo_exists, caption='–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏. –í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ?', reply_markup=kd.replace_or_cancel)
    else:
        await state.set_state(Photo.photo)
        await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ', reply_markup=kd.to_the_main_page)

@router.message(Photo.photo)
async def main(message: Message, state: FSMContext):
    data = await state.get_data()
    id_location = data.get('id_location')
    if message.photo:
        photo_file_id = message.photo[-1].file_id
        # print(photo_file_id) # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è id —Ñ–æ—Ç–∫–∏ –ª—é–±–æ–π
        user_tg_id = message.from_user.id
        sent_at = datetime.utcnow()
        await save_photo(user_tg_id,  photo_file_id, id_location, sent_at)
        admin_chat_id = -4240133579
        await message.bot.send_photo(admin_chat_id, photo=photo_file_id, caption=f'Photo from location ID: {id_location}')
        
        await message.answer(f'–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. Location ID: {id_location}', reply_markup=kd.to_the_main_page)
        await state.clear()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.', reply_markup=kd.to_the_main_page)

@router.callback_query(F.data =='replace')
async def main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer('–ü—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –∏ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏–≥—Ä—ã', reply_markup=kd.replace_or_cancel_2)
    await state.update_data(replace_confirmed=True)

@router.callback_query(F.data =='replace_2')
async def main(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    if data.get('replace_confirmed'):
        data = await state.get_data()
    photo_id = data.get('photo_id')
    if photo_id:
        await rq.delete_photo_from_db(photo_id)
        await callback.message.answer('–°—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.', reply_markup=kd.to_the_main_page)
        await state.set_state(Photo.photo)


# –∞–¥–º–∏–Ω
async def send_next_photo_for_review(chat_id, bot):
    photo = await rq.get_photos_from_db(admin_true=0)
    if not photo:
        await bot.send_message(chat_id, '–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.')
        return
    photo_id = photo['photo']
    admin_answer_keyboard = await kd.create_admin_answer_keyboard(photo['id'])
    caption = f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ç–æ\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {photo['location_name']}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:{photo['name']}\n–ù–∏–∫: @{photo['username']}"
    await bot.send_photo(chat_id, photo_id, caption=caption, reply_markup=admin_answer_keyboard)


@router.message(F.text == '–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ')
async def answer_admin(message: Message):
    await send_next_photo_for_review(message.chat.id, message.bot)

@router.message(F.text == 'üèÜ–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏üèÜ')
async def answer_admin_win(message: Message):
    winners = await rq.answer_admin_win()
    if winners:
        winners_text = "\n\n".join(winners)
        await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n\n{winners_text}")
    else:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.")


@router.callback_query(F.data.startswith('yes_'))
async def approve_photo(callback: CallbackQuery):
    photo_id = callback.data.split('_')[1]
    await rq.update_photo_status(photo_id, admin_true=1)
    await callback.answer('–§–æ—Ç–æ –æ–¥–æ–±—Ä–µ–Ω–æ.')
    await callback.message.delete()
    user_id = await rq.get_user_id_by_photo_id(photo_id)
    photo_tg_id = await rq.get_photo_tg_id(photo_id)
    await callback.bot.send_photo(user_id, photo=photo_tg_id, caption="–í–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞")
    is_winner = await rq.check_winner(user_id)
    if is_winner:
        await callback.bot.send_message(user_id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É –∏ –∑–∞–Ω—è–ª–∏ {is_winner} –º–µ—Å—Ç–æ")
    await send_next_photo_for_review(callback.message.chat.id, callback.bot)


@router.callback_query(F.data.startswith('no_'))
async def reject_photo(callback: CallbackQuery):
    photo_id = callback.data.split('_')[1]
    user_id = await rq.get_user_id_by_photo_id(photo_id)
    if user_id:
        photo_tg_id = await rq.get_photo_tg_id(photo_id)
        await callback.bot.send_photo(user_id, photo=photo_tg_id, caption="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.")
    await rq.delete_photo_from_db(photo_id)
    await callback.answer('–§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.')
    await callback.message.delete()
    await send_next_photo_for_review(callback.message.chat.id, callback.bot)


@router.message()
async def handle_unknown_message(message: Message):
    await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")